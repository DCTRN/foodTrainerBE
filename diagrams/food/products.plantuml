@startuml

class User {
}


class ProductDTO {
    + id?: number
    + producer: string
    + name: string
    + unit: string
    + amout: number
    + kcal: number
    + protein: number
    + carbohydrates: number
    + fats: number
    + creatorId: number
}

class ProductModification {
    + userId: number
    + product: ProductDTO
}
ProductModification --* ProductDTO

class ProductDeletion {
    + userId: number
    + productId: number
}

class ProductController {
    + findProductBy(searchText: string): Promise<ProductDTO[]>
    + addProduct(product: ProductDTO): Promise<ProductDTO>
    + modifyProduct(product: ProductModification): Promise<ProductDTO>
    + deleteProduct(product: ProductDeletion): Promise<void>
}
ProductController --> ProductService

class UsersRepository {
}

class ProductService {
    + findProductBy(searchText: string): Promise<ProductDTO[]>
    + addProduct(product: ProductDTO): Promise<ProductDTO>
    + modifyProduct(product: ProductModification): Promise<ProductDTO>
    + deleteProduct(product: ProductDeletion): Promise<void>
}
ProductService --> ProductRepository
ProductService --> UsersRepository
ProductService --* ProductDTO
ProductService --* ProductDeletion
ProductService --* ProductModification

class ProductRepository {
    + findProductBy(searchText: string): Promise<Product[]>
    + add(product: Product): Promise<Product>
    + update(product: Product): Promise<Product>
    + delete(id: number): Promise<void>
}
ProductRepository --* Product

class Product {
    + id: number
    + producer: string
    + name: string
    + unit: string
    + amount: number
    + kcal: number
    + protein: number
    + carbohydrates: number
    + fats: number
    + creator: User
}
Product --* User

class UserProductModification {
    + userId: number
    + userProduct: UserProductDTO
}
UserProductModification --* UserProductDTO

class UserProductDeletion {
    + userId: number
    + userProductId: number
}

class UserProductByDate {
    + date: Date
    + userProducts UserProductDTO[]
}
UserProductByDate --* UserProductDTO

class UserProductDTO {
    + id?: number
    + product: ProductDTO
    + amount: number
    + date?: Date
    + mealTimeType: MealEatTimeType
    + userId: number
}
UserProductDTO --* ProductDTO

class UserProductController {
    + addUserProduct(userProduct: UserProductDTO): Promise<UserProductDTO>
    + modifyUserProduct(userProduct: UserProductModification): Promise<UserProductDTO>
    + findProductByDate(date?: Date): Promise<UserProductDTO[]>
    + findProductByDateRange(start: Date, end?: Date): Promise<UserProductByDate[]>
    + deleteUserProduct(userProduct: UserProductDeletion): Promise<void>
}
UserProductController --> UserProductService

class UserProductService {
    + addUserProduct(userProduct: UserProductDTO): Promise<UserProductDTO>
    + modifyUserProduct(userProduct: UserProductModification): Promise<UserProductDTO>
    + findProductByDate(date?: Date): Promise<UserProductDTO[]>
    + findProductByDateRange(start: Date, end?: Date): Promise<UserProductByDate[]>
    + deleteUserProduct(userProduct: UserProductDeletion): Promise<void>
}
UserProductService --> UserProductRepository
UserProductService --> ProductService
UserProductService --* UserProductDTO
UserProductService --* UserProductDeletion
UserProductService --* UserProductModification
UserProductService --* UserProductByDate

class UserProductRepository {
    + findUserProductByDate(start: Date, end?: Date): Promise<UserProduct[]>
    + add(userProduct: UserProductDTO): Promise<UserProduct>
    + update(userProduct: UserProduct): Promise<UserProduct>
    + delete(id: number): Promise<void>
}
UserProductRepository --* UserProduct

enum MealEatTimeType {
    BREAKFAST
    LUNCH
    DINNER
    SUPPER
}

class UserProduct {
    + id: number
    + product: Product
    + amount: number
    + date: Date
    + mealTimeType: MealEatTimeType
    + user: User
}
UserProduct --* User
UserProduct --* Product
UserProduct --* MealEatTimeType

@enduml