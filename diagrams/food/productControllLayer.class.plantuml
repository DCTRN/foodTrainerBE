@startuml
' #ffbb00 - Controller
' #00b32a - Service
' #0077ff - Repository

' CODE LOGIC

class ProductController << (C, #ffbb00) Controller >> {
    + findProductBy(searchText: string, userId: number): Promise<ProductDTO[]>
    + addProduct(product: ProductDTO): Promise<ProductDTO>
    + modifyProduct(product: ProductModification): Promise<ProductDTO>
    + deleteProduct(product: ProductDeletion): Promise<void>
}
ProductController --> ProductService

class UsersRepository << (R, #0077ff) Repository >> {
    + async add(user: UserDTO): Promise<User>
    +  update(id: number, user: Partial<User>): Promise<User>
    +  findById(id: number): Promise<User>
    +  findByUsername(username: string): Promise<User>
    +  findBySimilarToUsername(username: string): Promise<Array<User>>
    +  findAll(): Promise<Array<User>>
    + delete(id: number): Promise<DeleteResult>
}

class ProductToDTOConverter {
    + convertProductc(product: Product): ProductDTO
    + convertProducts(product: Product[]): ProductDTO[]
}

class ProductService << (S, #00b32a) Service >> {
    + findProductBy(searchText: string): Promise<ProductDTO[]>
    + findProductsByUserId(userId: number): Promise<ProductDTO[]>
    + addProduct(product: ProductDTO): Promise<ProductDTO>
    + modifyProduct(product: ProductModification): Promise<ProductDTO>
    + deleteProduct(product: ProductDeletion): Promise<void>
}
ProductService --> ProductRepository
ProductService --> UsersRepository
ProductService -left-> ProductToDTOConverter

class ProductRepository << (R, #0077ff) Repository >> {
    + findProductBy(searchText: string): Promise<Product[]>
    + findProductsBy(userId: number): Promise<Product[]>
    + add(product: ProductDTO): Promise<Product>
    + update(product: ProductDTO): Promise<Product>
    + delete(id: number): Promise<void>
}
ProductRepository -left-> UsersRepository

class UserProductController << (C, #ffbb00) Controller >> {
    + addUserProduct(userProduct: UserProductDTO): Promise<UserProductDTO>
    + modifyUserProduct(userProduct: UserProductModification): Promise<UserProductDTO>
    + findProductByDate(date: UserProductsByDateDTO): Promise<UserProductDTO[]>
    + findProductByDateRange(date: UserProductsByDateRangeDTO): Promise<UserProductDTO[]>
    + deleteUserProduct(userProduct: UserProductDeletion): Promise<void>
}
UserProductController --> UserProductService

class UserProductService << (S, #00b32a) Service >> {
    + addUserProduct(userProduct: UserProductDTO): Promise<UserProductDTO>
    + modifyUserProduct(userProduct: UserProductModification): Promise<UserProductDTO>
    + findProductByDate(date: UserProductsByDateDTO): Promise<UserProductDTO[]>
    + findProductByDateRange(date: UserProductsByDateRangeDTO): Promise<UserProductDTO[]>
    + deleteUserProduct(userProduct: UserProductDeletion): Promise<void>
}
UserProductService --> UserProductRepository
UserProductService --> ProductService

class UserProductRepository << (R, #0077ff) Repository >> {
    + findUserProductByDate(date: UserProductsByDateDTO): Promise<UserProduct[]>
    + findUserProductByDateRange(date: UserProductsByDateRangeDTO): Promise<UserProduct[]>
    + add(userProduct: UserProductDTO): Promise<UserProduct>
    + update(userProduct: UserProductDTO): Promise<UserProduct>
    + delete(id: number): Promise<void>
}
@enduml